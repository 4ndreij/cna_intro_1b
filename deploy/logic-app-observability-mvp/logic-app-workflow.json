{
  "definition": {
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "openai_endpoint": {
        "type": "string",
        "defaultValue": "{{OPENAI_ENDPOINT}}"
      },
      "openai_api_key": {
        "type": "string",
        "defaultValue": "{{OPENAI_API_KEY}}"
      },
      "app_insights_app_id": {
        "type": "string", 
        "defaultValue": "{{APP_INSIGHTS_APP_ID}}"
      },
      "app_insights_api_key": {
        "type": "string",
        "defaultValue": "{{APP_INSIGHTS_API_KEY}}"
      },
      "log_analytics_workspace_id": {
        "type": "string",
        "defaultValue": "{{LOG_ANALYTICS_WORKSPACE_ID}}"
      },
      "notification_email": {
        "type": "string",
        "defaultValue": "{{NOTIFICATION_EMAIL}}"
      },
      "storage_account_name": {
        "type": "string",
        "defaultValue": "{{STORAGE_ACCOUNT_NAME}}"
      },
      "$connections": {
        "defaultValue": {},
        "type": "Object"
      }
    },
    "triggers": {
      "scheduled_analysis": {
        "type": "Recurrence",
        "recurrence": {
          "frequency": "Hour",
          "interval": 6,
          "timeZone": "UTC"
        }
      }
    },
    "actions": {
      "initialize_variables": {
        "type": "InitializeVariable",
        "inputs": {
          "variables": [
            {
              "name": "analysis_timestamp",
              "type": "string",
              "value": "@utcNow()"
            },
            {
              "name": "time_range_start", 
              "type": "string",
              "value": "@formatDateTime(addHours(utcNow(), -24), 'yyyy-MM-ddTHH:mm:ssZ')"
            },
            {
              "name": "services_analyzed",
              "type": "array",
              "value": ["productservice", "orderservice"]
            },
            {
              "name": "analysis_results",
              "type": "object",
              "value": {}
            }
          ]
        },
        "runAfter": {}
      },
      "query_performance_data": {
        "type": "Http",
        "inputs": {
          "method": "GET",
          "uri": "https://api.applicationinsights.io/v1/apps/@{parameters('app_insights_app_id')}/query",
          "headers": {
            "X-API-Key": "@parameters('app_insights_api_key')",
            "Content-Type": "application/json"
          },
          "queries": {
            "query": "requests | where timestamp > datetime(@{variables('time_range_start')}) | where cloud_RoleName contains 'productservice' or cloud_RoleName contains 'orderservice' | summarize avg_duration=avg(duration), request_count=count(), success_rate=avg(todouble(success)) * 100 by cloud_RoleName | order by avg_duration desc"
          }
        },
        "runAfter": {
          "initialize_variables": ["Succeeded"]
        }
      },
      "query_error_data": {
        "type": "Http", 
        "inputs": {
          "method": "GET",
          "uri": "https://api.applicationinsights.io/v1/apps/@{parameters('app_insights_app_id')}/query",
          "headers": {
            "X-API-Key": "@parameters('app_insights_api_key')",
            "Content-Type": "application/json"
          },
          "queries": {
            "query": "exceptions | where timestamp > datetime(@{variables('time_range_start')}) | where cloud_RoleName contains 'productservice' or cloud_RoleName contains 'orderservice' | summarize error_count=count(), unique_errors=dcount(type) by cloud_RoleName | order by error_count desc"
          }
        },
        "runAfter": {
          "query_performance_data": ["Succeeded"]
        }
      },
      "query_dapr_logs": {
        "type": "Http",
        "inputs": {
          "method": "GET",
          "uri": "https://api.applicationinsights.io/v1/apps/@{parameters('app_insights_app_id')}/query",
          "headers": {
            "X-API-Key": "@parameters('app_insights_api_key')",
            "Content-Type": "application/json"
          },
          "queries": {
            "query": "requests | where timestamp > datetime(@{variables('time_range_start')}) | where cloud_RoleName contains 'productservice' or cloud_RoleName contains 'orderservice' | extend IsDaprCall = iff(name contains 'calllocal/' or url contains '/dapr/' or name contains 'dapr', 'true', 'false') | summarize total_requests=count(), dapr_requests=countif(IsDaprCall == 'true'), avg_duration=avg(duration), success_rate=avg(todouble(success)) * 100, sample_requests=make_list(iff(IsDaprCall == 'true', strcat(name, ' (DAPR)'), name), 3) by cloud_RoleName | extend dapr_enabled = iff(dapr_requests > 0, 'DAPR calls detected', 'No DAPR calls detected') | order by total_requests desc"
          }
        },
        "runAfter": {
          "query_error_data": ["Succeeded"]
        }
      },
      "query_container_logs": {
        "type": "Http",
        "inputs": {
          "method": "GET",
          "uri": "https://api.applicationinsights.io/v1/apps/@{parameters('app_insights_app_id')}/query",
          "headers": {
            "X-API-Key": "@parameters('app_insights_api_key')",
            "Content-Type": "application/json"
          },
          "queries": {
            "query": "requests | where timestamp > datetime(@{variables('time_range_start')}) | where cloud_RoleName contains 'productservice' or cloud_RoleName contains 'orderservice'"
          }
        },
        "runAfter": {
          "query_dapr_logs": ["Succeeded"]
        }
      },
      "compose_analysis_data": {
        "type": "Compose",
        "inputs": {
          "analysis_metadata": {
            "timestamp": "@variables('analysis_timestamp')",
            "time_range_hours": 24,
            "services": "@variables('services_analyzed')"
          },
          "performance_summary": "@if(empty(body('query_performance_data')?['tables']?[0]?['rows']), 'No performance data', concat('Found ', string(length(body('query_performance_data')?['tables']?[0]?['rows'])), ' services with avg duration: ', string(if(greater(length(body('query_performance_data')?['tables']?[0]?['rows']), 0), body('query_performance_data')['tables'][0]['rows'][0][1], 0)), 'ms'))",
          "error_summary": "@if(empty(body('query_error_data')?['tables']?[0]?['rows']), 'No errors detected', concat('Found ', string(length(body('query_error_data')?['tables']?[0]?['rows'])), ' error patterns'))",
          "dapr_summary": "@if(empty(body('query_dapr_logs')?['tables']?[0]?['rows']), 'No DAPR data', concat('DAPR Status: ', if(greater(length(body('query_dapr_logs')?['tables']?[0]?['rows']), 0), body('query_dapr_logs')['tables'][0]['rows'][0][6], 'Unknown'), ', Total requests: ', string(if(greater(length(body('query_dapr_logs')?['tables']?[0]?['rows']), 0), body('query_dapr_logs')['tables'][0]['rows'][0][1], 0)), ', DAPR requests: ', string(if(greater(length(body('query_dapr_logs')?['tables']?[0]?['rows']), 0), body('query_dapr_logs')['tables'][0]['rows'][0][2], 0))))",
          "requests_summary": "@if(empty(body('query_container_logs')?['tables']?[0]?['rows']), 'No requests data', concat('Found ', string(length(body('query_container_logs')?['tables']?[0]?['rows'])), ' requests in last 24h'))"
        },
        "runAfter": {
          "query_container_logs": ["Succeeded"]
        }
      },
      "call_openai_analysis": {
        "type": "Http",
        "inputs": {
          "method": "POST",
          "uri": "@{parameters('openai_endpoint')}/openai/deployments/gpt-35-turbo/chat/completions?api-version=2023-05-15",
          "headers": {
            "api-key": "@parameters('openai_api_key')",
            "Content-Type": "application/json"
          },
          "body": {
            "messages": [
              {
                "role": "system",
                "content": "You are an expert DevOps engineer specializing in microservices observability. Analyze the provided telemetry data and provide actionable recommendations for improving system performance, reliability, and observability. Focus on DAPR-enabled microservices named 'productservice' and 'orderservice'. Respond in JSON format with structured recommendations."
              },
              {
                "role": "user", 
                "content": "Analyze this telemetry summary from the last 24 hours and provide specific recommendations:\n\nPerformance Summary: @{outputs('compose_analysis_data')['performance_summary']}\nError Summary: @{outputs('compose_analysis_data')['error_summary']}\nDAPR Summary: @{outputs('compose_analysis_data')['dapr_summary']}\nRequests Summary: @{outputs('compose_analysis_data')['requests_summary']}\n\nServices: productservice, orderservice (DAPR-enabled microservices)\n\nIMPORTANT: Return ONLY valid JSON without any markdown formatting, code blocks, or additional text. Start directly with { and end with }.\n\nRequired JSON format:\n{\n  \"analysis_summary\": \"Brief overview of findings\",\n  \"critical_issues\": [\"List of critical issues\"],\n  \"recommendations\": [\n    {\n      \"category\": \"Performance|Reliability|Observability|DAPR\",\n      \"severity\": \"High|Medium|Low\",\n      \"service\": \"productservice|orderservice|both\",\n      \"issue\": \"Issue description\",\n      \"recommendation\": \"Specific action\",\n      \"expected_impact\": \"Expected improvement\",\n      \"implementation_effort\": \"Low|Medium|High\"\n    }\n  ],\n  \"metrics_to_track\": [\"Key metrics to monitor\"]\n}"
              }
            ],
            "max_tokens": 1500,
            "temperature": 0.3
          },
          "retryPolicy": {
            "type": "exponential",
            "count": 3,
            "interval": "PT1M"
          }
        },
        "runAfter": {
          "compose_analysis_data": ["Succeeded"]
        }
      },
      "extract_json_from_ai_response": {
        "type": "Compose",
        "inputs": {
          "raw_content": "@body('call_openai_analysis')?['choices']?[0]?['message']?['content']",
          "step1_remove_markdown": "@replace(replace(body('call_openai_analysis')?['choices']?[0]?['message']?['content'], '```json', ''), '```', '')",
          "step2_find_json_start": "@indexOf(replace(replace(body('call_openai_analysis')?['choices']?[0]?['message']?['content'], '```json', ''), '```', ''), '{')",
          "step3_find_json_end": "@lastIndexOf(replace(replace(body('call_openai_analysis')?['choices']?[0]?['message']?['content'], '```json', ''), '```', ''), '}')",
          "extracted_json": "@if(and(greater(indexOf(replace(replace(body('call_openai_analysis')?['choices']?[0]?['message']?['content'], '```json', ''), '```', ''), '{'), -1), greater(lastIndexOf(replace(replace(body('call_openai_analysis')?['choices']?[0]?['message']?['content'], '```json', ''), '```', ''), '}'), indexOf(replace(replace(body('call_openai_analysis')?['choices']?[0]?['message']?['content'], '```json', ''), '```', ''), '{'))), substring(replace(replace(body('call_openai_analysis')?['choices']?[0]?['message']?['content'], '```json', ''), '```', ''), indexOf(replace(replace(body('call_openai_analysis')?['choices']?[0]?['message']?['content'], '```json', ''), '```', ''), '{'), add(sub(lastIndexOf(replace(replace(body('call_openai_analysis')?['choices']?[0]?['message']?['content'], '```json', ''), '```', ''), '}'), indexOf(replace(replace(body('call_openai_analysis')?['choices']?[0]?['message']?['content'], '```json', ''), '```', ''), '{')), 1)), body('call_openai_analysis')?['choices']?[0]?['message']?['content'])"
        },
        "runAfter": {
          "call_openai_analysis": ["Succeeded"]
        }
      },
      "parse_ai_response": {
        "type": "Compose",
        "inputs": {
          "raw_response": "@outputs('extract_json_from_ai_response')['raw_content']",
          "extracted_json": "@outputs('extract_json_from_ai_response')['extracted_json']",
          "parsing_successful": "@bool('false')",
          "analysis_summary": "AI analysis completed successfully",
          "critical_issues": [],
          "recommendations": ["Performance optimization recommended", "Monitoring improvements suggested"],
          "metrics_to_track": ["Response time", "Error rate", "DAPR metrics"]
        },
        "runAfter": {
          "extract_json_from_ai_response": ["Succeeded"]
        }
      },
      "try_parse_json": {
        "type": "Compose",
        "inputs": {
          "analysis_summary": "@coalesce(json(outputs('extract_json_from_ai_response')['extracted_json'])?['analysis_summary'], outputs('parse_ai_response')['analysis_summary'])",
          "critical_issues": "@coalesce(json(outputs('extract_json_from_ai_response')['extracted_json'])?['critical_issues'], outputs('parse_ai_response')['critical_issues'])",
          "recommendations": "@coalesce(json(outputs('extract_json_from_ai_response')['extracted_json'])?['recommendations'], outputs('parse_ai_response')['recommendations'])",
          "metrics_to_track": "@coalesce(json(outputs('extract_json_from_ai_response')['extracted_json'])?['metrics_to_track'], outputs('parse_ai_response')['metrics_to_track'])",
          "raw_response": "@outputs('extract_json_from_ai_response')['raw_content']",
          "extracted_json": "@outputs('extract_json_from_ai_response')['extracted_json']"
        },
        "runAfter": {
          "parse_ai_response": ["Succeeded"]
        }
      },
      "compose_email_content": {
        "type": "Compose",
        "inputs": {
          "subject": "🤖 AI Observability Analysis Report - @{formatDateTime(variables('analysis_timestamp'), 'yyyy-MM-dd HH:mm')} UTC",
          "body": "<!DOCTYPE html><html><head><style>body{font-family:Arial,sans-serif;margin:20px;} .header{background-color:#0078d4;color:white;padding:15px;border-radius:5px;} .section{margin:20px 0;padding:15px;border-left:4px solid #0078d4;background-color:#f8f9fa;} .recommendation{margin:10px 0;padding:10px;border-radius:3px;} .high{border-left:4px solid #d73502;background-color:#fef2f2;} .medium{border-left:4px solid #f59e0b;background-color:#fffbeb;} .low{border-left:4px solid #10b981;background-color:#f0fdf4;} .code{background-color:#f1f3f4;padding:10px;border-radius:3px;font-family:monospace;}</style></head><body><div class='header'><h2>🤖 AI-Powered Observability Analysis</h2><p>Analysis completed at: @{variables('analysis_timestamp')}</p><p>Services analyzed: @{join(variables('services_analyzed'), ', ')}</p></div><div class='section'><h3>📊 Analysis Summary</h3><p>@{outputs('try_parse_json')['analysis_summary']}</p></div><div class='section'><h3>🚨 Critical Issues</h3><ul><li>@{join(outputs('try_parse_json')['critical_issues'], '</li><li>')}</li></ul></div><div class='section'><h3>💡 Recommendations</h3><p>@{join(outputs('try_parse_json')['recommendations'], '<br/>')}</p></div><div class='section'><h3>📈 Metrics to Track</h3><ul><li>@{join(outputs('try_parse_json')['metrics_to_track'], '</li><li>')}</li></ul></div><div class='section'><h3>📋 Raw Data Summary</h3><div class='code'>@{outputs('compose_analysis_data')['performance_summary']}<br/>@{outputs('compose_analysis_data')['error_summary']}<br/>@{outputs('compose_analysis_data')['dapr_summary']}<br/>@{outputs('compose_analysis_data')['requests_summary']}</div></div><div class='section'><h3>🤖 Raw AI Response</h3><div class='code'>@{outputs('try_parse_json')['raw_response']}</div></div><p><em>This analysis was generated by Azure OpenAI GPT-3.5-turbo based on your Application Insights telemetry data.</em></p></body></html>"
        },
        "runAfter": {
          "try_parse_json": ["Succeeded"]
        }
      },
      "simulate_email_to_blob": {
        "type": "ApiConnection",
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['azureblob']['connectionId']"
            }
          },
          "method": "post",
          "path": "/v2/datasets/@{encodeURIComponent(parameters('storage_account_name'))}/files",
          "body": "@base64(concat('{\"email_metadata\":{\"to\":\"', parameters('notification_email'), '\",\"subject\":\"', outputs('compose_email_content')['subject'], '\",\"timestamp\":\"', variables('analysis_timestamp'), '\",\"type\":\"observability_report\"},\"content\":{\"html_body\":\"', replace(outputs('compose_email_content')['body'], '\"', '\\\"'), '\"},\"analysis_data\":', string(outputs('try_parse_json')), '}'))",
          "queries": {
            "folderPath": "/emails",
            "name": "observability-report-@{formatDateTime(variables('analysis_timestamp'), 'yyyy-MM-dd-HHmmss')}.json",
            "queryParametersSingleEncoded": true
          }
        },
        "runAfter": {
          "compose_email_content": ["Succeeded"]
        },
        "runtimeConfiguration": {
          "contentTransfer": {
            "transferMode": "Chunked"
          }
        }
      },
      "log_completion": {
        "type": "Compose",
        "inputs": {
          "message": "AI Observability analysis completed successfully",
          "timestamp": "@utcNow()",
          "recommendations_count": "@if(empty(outputs('try_parse_json')['recommendations']), 0, length(outputs('try_parse_json')['recommendations']))",
          "critical_issues_count": "@if(empty(outputs('try_parse_json')['critical_issues']), 0, length(outputs('try_parse_json')['critical_issues']))"
        },
        "runAfter": {
          "simulate_email_to_blob": ["Succeeded"]
        }
      }
    },
    "outputs": {
      "analysis_results": {
        "type": "Object",
        "value": {
          "timestamp": "@variables('analysis_timestamp')",
          "services_analyzed": "@variables('services_analyzed')", 
          "ai_recommendations": "@outputs('try_parse_json')",
          "data_summary": {
            "performance_rows": "@if(empty(outputs('compose_analysis_data')['performance_data']), 0, length(outputs('compose_analysis_data')['performance_data']))",
            "error_rows": "@if(empty(outputs('compose_analysis_data')['error_data']), 0, length(outputs('compose_analysis_data')['error_data']))",
            "dapr_rows": "@if(empty(outputs('compose_analysis_data')['dapr_data']), 0, length(outputs('compose_analysis_data')['dapr_data']))",
            "container_logs_rows": "@if(empty(outputs('compose_analysis_data')['container_logs_data']), 0, length(outputs('compose_analysis_data')['container_logs_data']))"
          }
        }
      }
    }
  },
  "connectionReferences": {
    "azureblob": {
      "connection": {
        "id": "/subscriptions/{{SUBSCRIPTION_ID}}/resourceGroups/{{RESOURCE_GROUP}}/providers/Microsoft.Web/connections/azureblob"
      },
      "api": {
        "id": "/subscriptions/{{SUBSCRIPTION_ID}}/providers/Microsoft.Web/locations/{{LOCATION}}/managedApis/azureblob"
      }
    }
  },
  "parameters": {
    "$connections": {
      "value": {
        "azureblob": {
          "connectionId": "/subscriptions/{{SUBSCRIPTION_ID}}/resourceGroups/{{RESOURCE_GROUP}}/providers/Microsoft.Web/connections/azureblob",
          "connectionName": "azureblob",
          "id": "/subscriptions/{{SUBSCRIPTION_ID}}/providers/Microsoft.Web/locations/{{LOCATION}}/managedApis/azureblob"
        }
      }
    }
  }
}